// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`plugin Magic comment should remove only needed comments 1`] = `
"const load =
/* IMPORTANT! */
{
  resolved: {},

  chunkName() {
    return \\"moment\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] === false) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackChunkName: \\"moment\\" */
  'moment'),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"moment\\");
    }

    return eval('require.resolve')(\\"moment\\");
  }

};"
`;

exports[`plugin Magic comment should transpile arrow functions 1`] = `
"const load = {
  resolved: {},

  chunkName() {
    return \\"moment\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] === false) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackChunkName: \\"moment\\" */
  'moment'),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"moment\\");
    }

    return eval('require.resolve')(\\"moment\\");
  }

};"
`;

exports[`plugin Magic comment should transpile function expression 1`] = `
"const load = {
  resolved: {},

  chunkName() {
    return \\"moment\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] === false) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: function () {
    return import(
    /* webpackChunkName: \\"moment\\" */
    'moment');
  },

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"moment\\");
    }

    return eval('require.resolve')(\\"moment\\");
  }

};"
`;

exports[`plugin Magic comment should transpile shortand properties 1`] = `
"const obj = {
  load: {
    resolved: {},

    chunkName() {
      return \\"moment\\";
    },

    isReady(props) {
      const key = this.resolve(props);

      if (this.resolved[key] === false) {
        return false;
      }

      if (typeof __webpack_modules__ !== 'undefined') {
        return !!__webpack_modules__[key];
      }

      return false;
    },

    importAsync: () => {
      return import(
      /* webpackChunkName: \\"moment\\" */
      'moment');
    },

    requireAsync(props) {
      const key = this.resolve(props);
      this.resolved[key] = false;
      return this.importAsync(props).then(resolved => {
        this.resolved[key] = true;
        return resolved;
      });
    },

    requireSync(props) {
      const id = this.resolve(props);

      if (typeof __webpack_require__ !== 'undefined') {
        return __webpack_require__(id);
      }

      return eval('module.require')(id);
    },

    resolve() {
      if (require.resolveWeak) {
        return require.resolveWeak(\\"moment\\");
      }

      return eval('require.resolve')(\\"moment\\");
    }

  }
};"
`;

exports[`plugin aggressive import should work with destructuration 1`] = `
"Component.default(({
  foo
}) => import(
/* webpackChunkName: \\"Pages\\" */
\`./\${foo}\`));"
`;

exports[`plugin aggressive import with "webpackChunkName" should replace it 1`] = `
"Component.default(props => import(
/* webpackChunkName: \\"Pages\\" */
\`./\${props.foo}\`));"
`;

exports[`plugin aggressive import without "webpackChunkName" should support complex request 1`] = `"Component.default(props => import(\`./dir/\${props.foo}/test\`));"`;

exports[`plugin aggressive import without "webpackChunkName" should support destructuring 1`] = `
"Component.default(({
  foo
}) => import(\`./dir/\${foo}/test\`));"
`;

exports[`plugin aggressive import without "webpackChunkName" should support simple request 1`] = `"Component.default(props => import(\`./\${props.foo}\`));"`;

exports[`plugin loadable.lib should be transpiled too 1`] = `"Component.default.lib(() => import('moment'));"`;

exports[`plugin simple import in a complex promise should work 1`] = `"Component.default(() => timeout(import('./ModA'), 2000));"`;

exports[`plugin simple import should transform path into "chunk-friendly" name 1`] = `"Component.default(() => import('../foo/bar'));"`;

exports[`plugin simple import should work with * in name 1`] = `"Component.default(() => import(\`./foo*\`));"`;

exports[`plugin simple import should work with + concatenation 1`] = `"Component.default(() => import('./Mod' + 'A'));"`;

exports[`plugin simple import should work with template literal 1`] = `"Component.default(() => import(\`./ModA\`));"`;

exports[`plugin simple import with "webpackChunkName" comment should use it 1`] = `
"Component.default(() => import(
/* webpackChunkName: \\"ChunkA\\" */
'./ModA'));"
`;

exports[`plugin simple import with "webpackChunkName" comment should use it even if comment is separated by "," 1`] = `
"Component.default(() => import(
/* webpackPrefetch: true, webpackChunkName: \\"ChunkA\\" */
'./ModA'));"
`;

exports[`plugin simple import without "webpackChunkName" comment should add it 1`] = `"Component.default(() => import('./ModA'));"`;
